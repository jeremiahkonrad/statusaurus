{"version":3,"sources":["constants.js","api/api.js","reducer.js","actions.js","components/outages/outages.js","components/status-table/status-row/status-row.js","components/status-table/status-table.js","App.js","serviceWorker.js","index.js"],"names":["API_LIST","NO_CORS","getStatus","apiName","fetch","includes","url","getApiEndpoint","then","response","json","catch","err","console","error","reducer","state","action","type","status","apis","outages","filter","outage","Error","Outages","className","length","join","StatusRow","api","success","message","hostname","time","moment","format","StatusTable","statuses","Object","keys","map","key","initialState","getApis","dispatch","forEach","apiStatus","App","useReducer","useEffect","checkApis","setInterval","clearInterval","Boolean","window","location","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c1b4b0c.chunk.js","sourcesContent":["export const API_LIST = [\n  'accounts',\n  'assets',\n  'customers',\n  'datapoints',\n  'devices',\n  'documents',\n  'forms',\n  'invites', // this is the downed API\n  'media',\n  'messages',\n  'namespaces',\n  'orders',\n  'patients',\n  'relationships',\n  'rules',\n  'templates',\n  'users',\n  'workflows',\n];\n\nexport const NO_CORS = ['messages', 'users'];\n\nexport const INTERVAL_TO_CHECK_MS = 15000;\n","import { NO_CORS } from './../constants';\n\n// this is subject to rate limiting\nconst funnelCors = (url) => `https://cors-anywhere.herokuapp.com/${url}`;\n\nconst getApiEndpoint = (apiName) => {\n  if (NO_CORS.includes(apiName)) {\n    return funnelCors(`https://api.factoryfour.com/${apiName}/health/status`);\n  }\n  return `https://api.factoryfour.com/${apiName}/health/status`;\n};\n\nexport const getStatus = (apiName) =>\n  fetch(getApiEndpoint(apiName))\n    .then((response) => response.json())\n    .catch((err) => console.error(err)); // report to some central logging\n","import { RECEIVED_STATUS, STATUS_OK, STATUS_OUTAGE } from './actions';\n\nconst reducer = (state, action) => {\n  const { type, apiName, status } = action;\n\n  switch (type) {\n    case RECEIVED_STATUS:\n      return {\n        ...state,\n        apis: {\n          ...state?.apis,\n          [apiName]: {\n            ...status,\n          },\n        },\n      };\n\n    case STATUS_OK:\n      return {\n        ...state,\n        outages: state.outages.filter((outage) => outage !== apiName),\n      };\n\n    case STATUS_OUTAGE:\n      return {\n        ...state,\n        outages: state.outages.includes(apiName)\n          ? state.outages\n          : [...state.outages, apiName],\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport const updateStatus = (dispatch, status) => {};\n\nexport default reducer;\n","// actions that are fair game\nexport const RECEIVED_STATUS = 'RECEIVE_STATUS';\nexport const STATUS_OK = 'STATUS_OK ';\nexport const STATUS_OUTAGE = 'STATUS_OUTAGE ';\n","import React from 'react';\n\nconst Outages = ({ outages }) => (\n  <div className=\"outages\">\n    <p>\n      <strong>{`Current Outages(${outages.length}): [${outages.join(\n        ', '\n      )}]`}</strong>\n    </p>\n    <p>\n      *Note `messages` and `users` APIs may render as a false positive once CORS\n      proxy hits rate-limiting\n      <br />\n      The number of requests is limited to 200 per 60 minutes.\n    </p>\n  </div>\n);\n\nexport default Outages;\n","import React from 'react';\nimport moment from 'moment';\n\nconst StatusRow = ({ api, status }) => {\n  const success = status?.success || false;\n  const message = status?.message || 'outage';\n  const hostname = status?.hostname || 'n/a';\n  const time = status?.time || null;\n\n  return (\n    <tr className={success ? 'api-up' : 'api-outage'}>\n      <td className=\"api-name\">{api}</td>\n      <td>{time ? moment(time).format('LTS') : '----'}</td>\n      <td>{hostname}</td>\n      <td>{success ? message : <strong>{message}</strong>}</td>\n    </tr>\n  );\n};\n\nexport default StatusRow;\n","import React from 'react';\nimport StatusRow from './status-row/status-row';\n\nconst StatusTable = ({ statuses }) => {\n  return (\n    <table className=\"status-table\">\n      <thead className=\"status-table-header\">\n        <tr>\n          <td>API</td>\n          <td>Time</td>\n          <td>Hostname</td>\n          <td>Message</td>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(statuses).map((apiName) => (\n          <StatusRow api={apiName} status={statuses[apiName]} key={apiName} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default StatusTable;\n","import React, { useEffect, useReducer } from 'react';\nimport './App.css';\nimport { getStatus } from './api/api';\nimport { API_LIST, INTERVAL_TO_CHECK_MS } from './constants';\nimport reducer from './reducer';\nimport { RECEIVED_STATUS, STATUS_OK, STATUS_OUTAGE } from './actions';\nimport Outages from './components/outages/outages';\nimport StatusTable from './components/status-table/status-table';\n\nconst initialState = { apis: {}, outages: [] };\n\nconst getApis = (dispatch) =>\n  API_LIST.forEach((api) => {\n    getStatus(api).then((apiStatus) => {\n      dispatch({ type: RECEIVED_STATUS, apiName: api, status: apiStatus });\n      if (apiStatus?.success || false !== true) {\n        dispatch({ type: STATUS_OUTAGE, apiName: api });\n      }\n      if (apiStatus?.success === true) {\n        dispatch({ type: STATUS_OK, apiName: api });\n      }\n    });\n  });\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    // run first time\n    getApis(dispatch);\n\n    const checkApis = setInterval(() => {\n      getApis(dispatch);\n    }, INTERVAL_TO_CHECK_MS);\n\n    return () => {\n      clearInterval(checkApis);\n    };\n  }, []);\n\n  return (\n    <div className=\"statusaurus\">\n      <h1>Statusaurus</h1>\n      <h3>Quick glance at the statuses of our API (refreshes automatically)</h3>\n      <Outages outages={state.outages} />\n      <StatusTable statuses={state.apis} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}